--- a/frontend/src/app/coverage/page.tsx
+++ b/frontend/src/app/coverage/page.tsx
@@ -40,10 +40,11 @@ import {
 } from '@mui/material';
 import {
   PlayArrow as PlayIcon,
   Upload as UploadIcon,
   Search as SearchIcon,
   Download as DownloadIcon,
+  BugReport as DiagnoseIcon,
   HelpOutline as HelpIcon,
   Description as PdfIcon,
   TableChart as SheetsIcon,
   Cancel as CancelIcon,
@@ -66,6 +67,8 @@ import {
   createCoverageRun,
   exportCoverageRun,
   downloadCoverageRunCSV,
+  diagnoseCoverageRun,
+  CoverageDiagnosis,
 } from '@/lib/api';
 import { useSettingsStore } from '@/stores/useSettingsStore';
 import {
@@ -113,6 +116,9 @@ export default function CoveragePage() {
   // const [resultSearch, setResultSearch] = useState<string>('');
   const [showExportDialog, setShowExportDialog] = useState<boolean>(false);
   const [exportSheetName, setExportSheetName] = useState<string>('');
+  const [showDiagnosisDialog, setShowDiagnosisDialog] = useState<boolean>(false);
+  const [diagnosisData, setDiagnosisData] = useState<CoverageDiagnosis | null>(null);
+  const [loadingDiagnosis, setLoadingDiagnosis] = useState<boolean>(false);
   const [sentenceCap, setSentenceCap] = useState<number>(500); // Coverage mode sentence cap (0 = unlimited)
   // Load user settings to know which default wordlist is configured
   const { data: settings } = useSettingsStore();
@@ -350,6 +356,23 @@ export default function CoveragePage() {
       enqueueSnackbar(msg, { variant: 'error' });
     }
   };
+
+  const handleDiagnose = async () => {
+    if (!currentRunId) return;
+    setLoadingDiagnosis(true);
+    setShowDiagnosisDialog(true);
+    try {
+      const data = await diagnoseCoverageRun(currentRunId);
+      setDiagnosisData(data);
+    } catch (error: unknown) {
+      enqueueSnackbar('Failed to generate diagnosis', { variant: 'error' });
+      setShowDiagnosisDialog(false);
+      setDiagnosisData(null);
+    } finally {
+      setLoadingDiagnosis(false);
+    }
+  };

   const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
     const file = event.target.files?.[0];
@@ -1143,6 +1166,7 @@ export default function CoveragePage() {

                   {/* Action Buttons */}
                   <Stack direction="row" spacing={2}>
+                    {/* Download CSV Button */}
                     <Button
                       variant="outlined"
                       startIcon={<DownloadIcon />}
@@ -1152,6 +1176,7 @@ export default function CoveragePage() {
                     >
                       Download CSV
                     </Button>
+                    {/* Export to Sheets Button */}
                     <Button
                       variant="outlined"
                       startIcon={<SheetsIcon />}
@@ -1161,6 +1186,18 @@ export default function CoveragePage() {
                     >
                       Export to Sheets
                     </Button>
+                    {/* Diagnose Coverage Button - Only for coverage/batch modes */}
+                    {coverageRun?.mode !== 'filter' && (
+                      <Button
+                        variant="outlined"
+                        startIcon={<DiagnoseIcon />}
+                        onClick={handleDiagnose}
+                        fullWidth
+                        disabled={loadingRun}
+                      >
+                        Diagnose Coverage
+                      </Button>
+                    )}
                   </Stack>

                 <Box>
@@ -1443,6 +1480,100 @@ export default function CoveragePage() {
           </Button>
         </DialogActions>
       </Dialog>
+
+      {/* Diagnosis Dialog */}
+      <Dialog
+        open={showDiagnosisDialog}
+        onClose={() => setShowDiagnosisDialog(false)}
+        maxWidth="md"
+        fullWidth
+        scroll="paper"
+      >
+        <DialogTitle>
+          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
+            <DiagnoseIcon color="primary" />
+            <Typography variant="h6">Coverage Diagnosis</Typography>
+          </Box>
+        </DialogTitle>
+        <DialogContent dividers>
+          {loadingDiagnosis ? (
+            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', py: 8 }}>
+              <CircularProgress />
+              <Typography variant="body1" sx={{ ml: 2 }}>Analyzing uncovered words...</Typography>
+            </Box>
+          ) : diagnosisData ? (
+            <Stack spacing={3}>
+              {/* Summary Stats */}
+              <Box>
+                <Typography variant="h6" gutterBottom>
+                  Coverage Summary
+                </Typography>
+                <Stack direction="row" spacing={2} sx={{ mb: 2 }}>
+                  <Chip
+                    label={`${diagnosisData.covered_words} / ${diagnosisData.total_words} words`}
+                    color="success"
+                    size="medium"
+                  />
+                  <Chip
+                    label={`${diagnosisData.coverage_percentage.toFixed(1)}% coverage`}
+                    color="primary"
+                    size="medium"
+                  />
+                  <Chip
+                    label={`${diagnosisData.uncovered_words} uncovered`}
+                    color="warning"
+                    size="medium"
+                  />
+                </Stack>
+              </Box>
+
+              {/* Recommendation */}
+              <Alert severity="info" sx={{ '& .MuiAlert-message': { width: '100%' } }}>
+                <Typography variant="body2">
+                  <strong>Recommendation:</strong> {diagnosisData.recommendation}
+                </Typography>
+              </Alert>
+
+              <Divider />
+
+              {/* Category Breakdown */}
+              <Typography variant="h6" gutterBottom>
+                Uncovered Words Breakdown
+              </Typography>
+
+              {Object.entries(diagnosisData.categories).map(([key, category]) => (
+                <Card key={key} variant="outlined">
+                  <CardContent>
+                    <Typography variant="subtitle1" fontWeight={600} gutterBottom color="primary.main">
+                      {category.description}
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary" gutterBottom>
+                      <strong>Count:</strong> {category.count} words
+                    </Typography>
+                    {category.sample_words.length > 0 && (
+                      <Box sx={{ mt: 2 }}>
+                        <Typography variant="caption" color="text.secondary" gutterBottom display="block">
+                          Sample words (showing up to {category.sample_words.length}):
+                        </Typography>
+                        <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
+                          {category.sample_words.map((word, idx) => (
+                            <Chip
+                              key={idx}
+                              label={word}
+                              size="small"
+                              variant="outlined"
+                              sx={{ fontFamily: 'monospace' }}
+                            />
+                          ))}
+                        </Box>
+                      </Box>
+                    )}
+                  </CardContent>
+                </Card>
+              ))}
+            </Stack>
+          ) : (
+            <Typography color="text.secondary">No diagnosis data available</Typography>
+          )}
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={() => setShowDiagnosisDialog(false)} variant="contained">
+            Close
+          </Button>
+        </DialogActions>
+      </Dialog>
     </Container>
     </RouteGuard>
   );

version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    image: french-novel-backend:latest
    container_name: french-novel-backend
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required}
      - GEMINI_API_KEY=${GEMINI_API_KEY:?GEMINI_API_KEY is required}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.5-flash}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app.db}
      - REDIS_URL=redis://redis:6379/0
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATELIMIT_ENABLED=${RATELIMIT_ENABLED:-True}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-52428800}
    volumes:
      - backend-logs:/app/logs
      - backend-data:/app/data
      - ./backend/client_secret.json:/app/client_secret.json:ro
      - ./backend/token.json:/app/token.json
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    image: french-novel-frontend:latest
    container_name: french-novel-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost:5000/api/v1}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: french-novel-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    image: french-novel-backend:latest
    container_name: french-novel-celery-worker
    # Optimized for 8GB RAM / 8 vCPU - full throttle configuration
    command: celery -A app.celery_app:celery worker --loglevel=info --concurrency=8 --max-tasks-per-child=100 --max-memory-per-child=900000 --task-events --prefetch-multiplier=2
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required}
      - GEMINI_API_KEY=${GEMINI_API_KEY:?GEMINI_API_KEY is required}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.5-flash}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app.db}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PRELOAD_SPACY=true
      - WORKER_MAX_MEMORY_MB=900
      - CELERY_CONCURRENCY=8
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=10
    volumes:
      - backend-logs:/app/logs
      - backend-data:/app/data
      - ./backend/client_secret.json:/app/client_secret.json:ro
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_app:celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    image: french-novel-backend:latest
    container_name: french-novel-flower
    command: celery --broker ${REDIS_URL} --result-backend ${REDIS_URL} -A app.celery_app:celery flower --port=5555 --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app.db}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis-data:
    driver: local
  backend-logs:
    driver: local
  backend-data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16


